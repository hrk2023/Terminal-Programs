syntax on
set noerrorbells
set tabstop=4 softtabstop=4
set shiftwidth=4
set expandtab
set smartindent
set nu
set nowrap
set smartcase
set noswapfile
set encoding=utf-8
set cryptmethod=blowfish2
set nobackup
set undodir=~/.vim/undodir/
set undofile
set incsearch
set colorcolumn=80


highlight ColorColumn ctermbg=0 guibg=lightgrey


call plug#begin('~/.vim/plugged')

Plug 'morhetz/gruvbox'
Plug 'mbbill/undotree'
Plug 'ycm-core/YouCompleteMe'
Plug 'davidhalter/jedi-vim'
Plug 'jremmen/vim-ripgrep'
Plug 'tpope/vim-fugitive'
Plug 'leafgarland/typescript-vim'
Plug 'vim-utils/vim-man'
Plug 'lyuts/vim-rtags'
Plug 'artur-shaik/vim-javacomplete2'
Plug 'mbbill/undotree'
Plug 'scrooloose/nerdtree'
Plug 'cakebaker/scss-syntax.vim'
Plug 'chr4/nginx.vim'
Plug 'chrisbra/csv.vim'                                                                                                                   1,1           Top  62
Plug 'Glench/Vim-Jinja2-Syntax'
Plug 'godlygeek/tabular'
Plug 'tpope/vim-markdown'
Plug 'iamcco/markdown-preview.nvim', { 'do': 'cd app & yarn install' }
Plug 'lifepillar/pgsql.vim'
Plug 'vim-scripts/AutoComplPop'
Plug 'othree/html5.vim'
Plug 'pangloss/vim-javascript'
Plug 'PotatoesMaster/i3-vim-syntax'
Plug 'stephpy/vim-yaml'
Plug 'tmux-plugins/vim-tmux'
Plug 'tpope/vim-git'
Plug 'tpope/vim-liquid'
Plug 'tpope/vim-rails'
Plug 'vim-python/python-syntax'
Plug 'vim-ruby/vim-ruby'
Plug 'wgwoods/vim-systemd-syntax'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'terryma/vim-multiple-cursors'
Plug 'mattn/emmet-vim'

call plug#end()


colorscheme gruvbox
set background=dark


let mapleader = " "


let g:netrw_browse_split = 2
let g:netrw_banner = 0
let g:netrw_winsize = 99
let g:ctrlp_use_caching = 0


"fzf Settings
nmap ; :Files<CR>
"fzf Settings End


"Python Autocomplete Settings
let g:jedi#use_splits_not_buffers = "right"
"End Python Autocomple Settings


"Java Autocomplete Settings
"imap <C-j>a <Plug>(JavaComplete-Imports-AddMissing)
"autocmd FileType java setlocal omnifunc=javacomplete#Complete
"Java Autocomplete Settings End


"Emmet Settings
let g:user_emmet_mode='i'
let g:user_emmet_install_global = 0
autocmd FileType html,css EmmetInstall
"Emmet Settings End


"Autocomplete Select First From PopUp
set complete+=kspell
set completeopt=menuone,longest
"Autocomplete Select First From PopUp End


nmap <leader>; :Files<CR>
nmap <leader>up :source %<CR>
nmap <leader>d :Ctrlw l<CR>
nmap <leader>a :Ctrlw h<CR>
nmap <leader>w :Ctrlw k<CR>
nmap <leader>s :Ctrlw j<CR>
nmap <leader>h :wincmd h<CR>
nmap <leader>j :wincmd j<CR>
nmap <leader>k :wincmd k<CR>
nmap <leader>l :wincmd l<CR>
nmap <leader>u :UndotreeShow<CR>
nmap <silent>; :
nmap <leader>pf :CtrlP<CR>
nnoremap <Leader>gd :GoDef<Enter>
nnoremap <Leader>nt :NERDTreeToggle<Enter>
nnoremap <silent> <Leader>nf :NERDTreeFind<CR>
nmap <Leader>vi :vertical resize +5<CR>
nmap <Leader>vr :vertical resize -5<CR>
nmap <Leader>hi :resize +5<CR>
nmap <Leader>hr :resize -5<CR>
nmap <Leader>t : below vertical terminal<CR>
nmap <Leader>tb : below terminal<CR>
nnoremap <silent> <Leader>;; iif err != nil { <esc>o} <esc>:w<CR>
nmap <leader><leader> V
vmap <Leader>y "+y
vmap <Leader>= <C-W><C-=>
"Autocomplete Bracket with Vanilla Vim
inoremap " ""<left>
inoremap ' ''<left>
inoremap ( ()<left>
inoremap [ []<left>
inoremap { {}<left>
inoremap {<CR> {<CR>}<ESC>O
inoremap {;<CR> {<CR>};<ESC>O
" YCM
" The best part.
nnoremap <silent> <Leader>gd :YcmCompleter GoTo<CR>
nnoremap <silent> <Leader>gf :YcmCompleter FixIt<CR>
" RG
" bind K to grep word under cursor
nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>
" command -nargs=+ -complete=file -bar Rg silent! grep! <args>|cwindow|redraw!
