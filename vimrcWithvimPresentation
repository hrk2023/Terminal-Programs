syntax on
set noerrorbells
set tabstop=4 softtabstop=4
set shiftwidth=4
set expandtab
set smartindent
set nu
set nowrap
set smartcase
set noswapfile
set encoding=utf-8
set cryptmethod=blowfish2
set nobackup
set undodir=~/.vim/undodir/
set undofile
set incsearch
set colorcolumn=80


highlight ColorColumn ctermbg=0 guibg=lightgrey


call plug#begin('~/.vim/plugged')

Plug 'morhetz/gruvbox'
Plug 'mbbill/undotree'
Plug 'davidhalter/jedi-vim'
Plug 'jremmen/vim-ripgrep'
Plug 'tpope/vim-fugitive'
Plug 'leafgarland/typescript-vim'
Plug 'vim-utils/vim-man'
Plug 'lyuts/vim-rtags'
Plug 'artur-shaik/vim-javacomplete2'
Plug 'mbbill/undotree'
Plug 'scrooloose/nerdtree'
Plug 'cakebaker/scss-syntax.vim'
Plug 'chr4/nginx.vim'
Plug 'Glench/Vim-Jinja2-Syntax'
Plug 'godlygeek/tabular'
Plug 'tpope/vim-markdown'
Plug 'iamcco/markdown-preview.nvim', { 'do': 'cd app & yarn install' }
Plug 'lifepillar/pgsql.vim'
Plug 'vim-scripts/AutoComplPop'
Plug 'othree/html5.vim'
Plug 'pangloss/vim-javascript'
Plug 'PotatoesMaster/i3-vim-syntax'
Plug 'stephpy/vim-yaml'
Plug 'tmux-plugins/vim-tmux'
Plug 'tpope/vim-git'
Plug 'tpope/vim-liquid'
Plug 'tpope/vim-rails'
Plug 'vim-python/python-syntax'
Plug 'vim-ruby/vim-ruby'
Plug 'wgwoods/vim-systemd-syntax'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'terryma/vim-multiple-cursors'
Plug 'mattn/emmet-vim'
Plug 'SirVer/ultisnips'
Plug 'sdaschner/vim-snippets'
call plug#end()


colorscheme gruvbox
set background=dark


let mapleader = " "


let g:netrw_browse_split = 2
let g:netrw_banner = 0
let g:netrw_winsize = 99
let g:ctrlp_use_caching = 0


"fzf Settings
nmap ; :Files<CR>
"fzf Settings End


"Python Autocomplete Settings
let g:jedi#use_splits_not_buffers = "right"
"End Python Autocomple Settings


"Java Autocomplete Settings
"imap <C-j>a <Plug>(JavaComplete-Imports-AddMissing)
"autocmd FileType java setlocal omnifunc=javacomplete#Complete
"Java Autocomplete Settings End


"Emmet Settings
let g:user_emmet_mode='i'
let g:user_emmet_install_global = 0
autocmd FileType html,css EmmetInstall
"Emmet Settings End

"Presentation Mode
noremap <Left> : silent bp<CR> :redraw!<CR>
noremap <Right> :silent bn<CR> :redraw!<CR>
nmap <F5> :set number! showmode! hidden! ruler!<CR>
nmap <F2> :call DisplayPresentationBoundaries()<CR>
nmap <F3> :call FindExecuteCommand()<CR>
"Presentation Mode End


"Autocomplete Select First From PopUp
set complete+=kspell
set completeopt=menuone,longest
"Autocomplete Select First From PopUp End


nmap <leader>; :Files<CR>
nmap <leader>up :source %<CR>
nmap <leader>d :Ctrlw l<CR>
nmap <leader>v <C-v>
nmap <leader>a :Ctrlw h<CR>
nmap <leader>w :Ctrlw k<CR>
nmap <leader>s :Ctrlw j<CR>
nmap <leader>h :wincmd h<CR>
nmap <leader>j :wincmd j<CR>
nmap <leader>k :wincmd k<CR>
nmap <leader>l :wincmd l<CR>
nmap <leader>u :UndotreeShow<CR>
nmap <leader>pf :CtrlP<CR>
nnoremap <Leader>gd :GoDef<Enter>
nnoremap <Leader>nt :NERDTreeToggle<Enter>
nnoremap <silent> <Leader>nf :NERDTreeFind<CR>
nmap <Leader>vi :vertical resize +5<CR>
nmap <Leader>vr :vertical resize -5<CR>
nmap <Leader>hi :resize +5<CR>
nmap <Leader>hr :resize -5<CR>
nmap <Leader>t : below vertical terminal<CR>
nmap <Leader>tb : below terminal<CR>
nnoremap <silent> <Leader>;; iif err != nil { <esc>o} <esc>:w<CR>
nmap <leader><leader> V
vmap <Leader>y "+y
vmap <Leader>= <C-W><C-=>
nmap <leader>l :bnext<CR>
nmap <leader>h : bprevious<CR>
"Autocomplete Bracket with Vanilla Vim
inoremap " ""<left>
inoremap ' ''<left>
inoremap ( ()<left>
inoremap [ []<left>
inoremap { {}<left>
inoremap {<CR> {<CR>}<ESC>O
inoremap {;<CR> {<CR>};<ESC>O
" Move Lines with Ctrl + (Shift) + J/K
nnoremap <C-j> :m +1<CR>
nnoremap <C-k> :m -2<CR>
inoremap <C-j> <Esc>:m +1<CR>gi
inoremap <C-k> <Esc>:m -2<CR>gi
vnoremap <C-j> :m '>+1<CR>gvgv
vnoremap <C-k> :m '<-2<CR>gvgv
" Move Lines End

function! s:AutoSource()
    let l:testedScripts = ['syntax.vim']
    if expand('<afile>:e') !=# 'vim'
        "Don't source the edited Vimscript file itself.
        call add(l:testedScripts, 'syntax.vim')
    endif

    for l:filespec in l:testedScripts
        if filereadable(l:filespec)
            execute 'source' fnameescape(l:filespec)
        endif
    endfor
    call FindExecuteCommand()
endfunction
augroup AutoSource
    autocmd! BufNewFile,BufRead * call <SID>AutoSource()
augroup END


" Makes Ascii art font
nmap <leader>F :.!toilet -w 150 -f standard<CR>
nmap <leader>f :.!toilet -w 150 -f small<CR>
nmap <leader>1 :.!toilet -w 150 -f term -F border<CR>
" Makes Ascii art font end
" YCM
" The best part.
nnoremap <silent> <Leader>gd :YcmCompleter GoTo<CR>
nnoremap <silent> <Leader>gf :YcmCompleter FixIt<CR>
" RG
" bind K to grep word under cursor
nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>
" command -nargs=+ -complete=file -bar Rg silent! grep! <args>|cwindow|redraw!

let g:presentationBoundsDisplayed = 0
function! DisplayPresentationBoundaries()
    if g:presentationBoundsDisplayed
        match
        set colorcolumn=0
        let g:presentationBoundsDisplayed = 0
    else
        highlight lastoflines ctermbg=darkred guibg=darkred
        match lastoflines /\%23l/
        set colorcolumn=80
        let g:presentationBoundsDisplayed = 1
    endif
endfunction


function! FindExecuteCommand()
    let line = search('\S*!'.'!:/*')
    if line > 0
        let command = substitute(getline(line),"\S*!"."!:*","","")
        execute "silent !". command
        execute "normal gg0"
        redraw
    endif
endfunction
